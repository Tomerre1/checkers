{"version":3,"sources":["services/board.service.js","cmps/BoardCell.jsx","pages/BoardPage.jsx","routes.js","cmps/BoardHeader.jsx","root-cmp.jsx","index.js"],"names":["gCounterBlack","gCounterWhite","boardService","getPossibleCells","cellI","cellJ","mat","type","i","length","j","value","isSelected","isDiagonal","row","col","JSON","parse","stringify","buildBoard","size","board","moveChecker","fromCell","toCell","player","console","log","tempValue","isGameOver","cord1","cord2","Math","abs","BoardCell","cellObj","onClickCell","className","onClick","BoardPage","useState","setBoard","selectedCell","setSelectedCell","setPlayer","gameBoards","setGameBoards","undoBoards","setUndoBoards","loser","setLoser","useEffect","newGameBoard","togglePlayer","onMoveChecker","clearBoard","clearSelectedCells","selectedCellBoard","updatedBoard","lostPlayer","forEach","cell","map","column","undoBoard","pop","redoBoard","routes","path","component","isExact","BoardHeader","to","RootCmp","route","exact","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b07d8c4.chunk.js","sourcesContent":["\r\nexport const boardService = {\r\n    getPossibleCells,\r\n    buildBoard,\r\n    moveChecker,\r\n    isGameOver\r\n}\r\n\r\nlet gCounterBlack;\r\nlet gCounterWhite;\r\n\r\n// Build board and checkers \r\n// Return matrix\r\n// Complexity: O(n^2) \r\nfunction isGameOver() {\r\n    if (gCounterBlack === 0) {\r\n        return 'Black Player Lost';\r\n    }\r\n    else if (gCounterWhite === 0) {\r\n        return 'White Player Lost';\r\n    }\r\n    return ''\r\n}\r\n\r\n// Build board and checkers \r\n// Return matrix\r\n// Complexity: O(n^2) \r\nfunction buildBoard(size) {\r\n    var board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board[i] = [];\r\n        for (let j = 0; j < size; j++) {\r\n            if ((i + j) % 2 === 0) {\r\n                board[i][j] = { value: null, isSelected: false, row: i, col: j };\r\n            } else if (i <= 2 && i >= 0) {\r\n                board[i][j] = { value: 'B', isSelected: false, row: i, col: j };\r\n            } else if (i >= 5 && i <= 7) {\r\n                board[i][j] = { value: 'W', isSelected: false, row: i, col: j };\r\n            } else {\r\n                board[i][j] = { value: 'X', isSelected: false, row: i, col: j };\r\n            }\r\n\r\n        }\r\n    }\r\n    gCounterBlack = 12\r\n    gCounterWhite = 12\r\n    return board;\r\n}\r\n\r\n// Get possible cells for each type of checker (W, B) \r\n// Return an array of objects with the coordinates of the possible cells\r\n// Complexity: O(n^2) \r\nfunction getPossibleCells(cellI, cellJ, mat, type) {\r\n    for (var i = cellI - 1; i <= cellI + 1; i++) {\r\n        if (i < 0 || i >= mat[0].length) continue;\r\n        for (var j = cellJ - 1; j <= cellJ + 1; j++) {\r\n            if (j < 0 || j >= mat[i].length) continue;\r\n            if (i === cellI && j === cellJ) continue;\r\n            if (mat[i][j].value !== null) {\r\n\r\n                if (type === 'W' && cellI >= i) {\r\n                    if (mat[i][j].value === 'X') {\r\n                        mat[i][j].isSelected = true;\r\n                    }\r\n                    //eat black checker\r\n                    else {\r\n                        //Right\r\n                        if ((i - 1 >= 0 && j + 1 < mat[i].length) && isDiagonal({ row: cellI, col: cellJ }, { row: i - 1, col: j + 1 }) && mat[i][j].value === 'B' && mat[i - 1][j + 1].value === 'X') {\r\n                            mat[i - 1][j + 1].isSelected = true;\r\n                        }\r\n                        //Left\r\n                        else if ((i - 1 >= 0 && j - 1 >= 0) && isDiagonal({ row: cellI, col: cellJ }, { row: i - 1, col: j - 1 }) && mat[i][j].value === 'B' && mat[i - 1][j - 1].value === 'X') {\r\n                            mat[i - 1][j - 1].isSelected = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                else if (type === 'B' && cellI < i) {\r\n                    if (mat[i][j].value === 'X') {\r\n                        mat[i][j].isSelected = true;\r\n                    }\r\n                    //eat white checker\r\n                    else {\r\n                        //Right\r\n                        if ((i + 1 < mat[i].length && j - 1 >= 0) && isDiagonal({ row: cellI, col: cellJ }, { row: i + 1, col: j - 1 }) && mat[i][j].value === 'W' && mat[i + 1][j - 1].value === 'X') {\r\n                            mat[i + 1][j - 1].isSelected = true;\r\n                        }\r\n                        //Left\r\n                        else if ((i + 1 < mat[i].length && j + 1 < mat[i].length) && isDiagonal({ row: cellI, col: cellJ }, { row: i + 1, col: j + 1 }) && mat[i][j].value === 'W' && mat[i + 1][j + 1].value === 'X') {\r\n                            mat[i + 1][j + 1].isSelected = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const deepCopyMatrix = JSON.parse(JSON.stringify(mat))\r\n    return deepCopyMatrix;\r\n}\r\n\r\n// Move checker to coordinate that user selected from possible cells \r\n// Return a new matrix with the new checker position\r\n// Complexity: O(1) \r\nfunction moveChecker(board, fromCell, toCell, player) {\r\n    if (fromCell.col - toCell.col === 2) {\r\n        if (player === 'W') {\r\n            board[fromCell.row - 1][toCell.col + 1].value = 'X'\r\n            gCounterBlack--\r\n            console.log('%c  gCounterBlack:', 'color: #00000;background: #aaefe5;', gCounterBlack);\r\n        }\r\n        else {\r\n            board[fromCell.row + 1][toCell.col + 1].value = 'X'\r\n            gCounterWhite--\r\n            console.log('%c  gCounterWhite:', 'color: #00000;background: #aaefe5;', gCounterWhite);\r\n        }\r\n\r\n    }\r\n    else if (fromCell.col - toCell.col === -2) {\r\n        if (player === 'W') {\r\n            board[fromCell.row - 1][toCell.col - 1].value = 'X'\r\n            gCounterBlack -= 1\r\n            console.log('%c  gCounterBlack:', 'color: #00000;background: #aaefe5;', gCounterBlack);\r\n        }\r\n        else {\r\n            board[fromCell.row + 1][toCell.col - 1].value = 'X'\r\n            gCounterWhite -= 1\r\n            console.log('%c  gCounterWhite:', 'color: #00000;background: #aaefe5;', gCounterWhite);\r\n        }\r\n    }\r\n    // swap\r\n    const tempValue = board[toCell.row][toCell.col].value\r\n    board[toCell.row][toCell.col].value = board[fromCell.row][fromCell.col].value;\r\n    board[fromCell.row][fromCell.col].value = tempValue;\r\n    const deepCopyMatrix = JSON.parse(JSON.stringify(board));\r\n    return deepCopyMatrix;\r\n}\r\n\r\n// Check if two coordinates are in the same diagonal\r\n// Complexity: O(1) \r\nfunction isDiagonal(cord1, cord2) {\r\n    return Math.abs(cord1.row - cord2.row) === Math.abs(cord1.col - cord2.col)\r\n}\r\n\r\n","\n\nexport function BoardCell({ cellObj, onClickCell, row, col }) {\n    return (\n        <td\n            className={cellObj.isSelected ? 'selected' : ''}\n            onClick={() => { onClickCell(row, col, cellObj.value) }}\n        >\n            {cellObj.value === 'B' && <div className=\"black-checker\"> </div>}\n            {cellObj.value === 'W' && <div className=\"white-checker\"> </div>}\n        </td>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { boardService } from '../services/board.service'\nimport { BoardCell } from '../cmps/BoardCell'\n\nexport function BoardPage() {\n    const [board, setBoard] = useState([])\n    const [selectedCell, setSelectedCell] = useState(null)\n    const [player, setPlayer] = useState('W')\n    const [gameBoards, setGameBoards] = useState([])\n    const [undoBoards, setUndoBoards] = useState([])\n    const [loser, setLoser] = useState('')\n\n    useEffect(() => {\n        const newGameBoard = boardService.buildBoard(8)\n        setBoard(newGameBoard)\n        setGameBoards([newGameBoard])\n    }, [])\n\n    const togglePlayer = () => {\n        setPlayer(player === 'W' ? 'B' : 'W')\n    }\n\n    const onRestart = () => {\n        const newGameBoard = boardService.buildBoard(8)\n        setBoard(newGameBoard)\n        setLoser('')\n        setPlayer('W')\n        setGameBoards([newGameBoard])\n    }\n\n    const onUndo = () => {\n        if (loser) return\n        const undoBoard = gameBoards.pop()\n        if (undoBoard) {\n            const clearBoard = clearSelectedCells(undoBoard)\n            setBoard(clearBoard)\n            setUndoBoards([...undoBoards, undoBoard])\n            togglePlayer()\n        }\n    }\n\n    const onRedo = () => {\n        if (loser) return\n        const redoBoard = undoBoards.pop()\n        if (redoBoard) {\n            const clearBoard = clearSelectedCells(redoBoard)\n            setBoard(clearBoard)\n            setGameBoards([...gameBoards, redoBoard])\n            togglePlayer()\n        }\n    }\n\n    const onClickCell = (row, col, type) => {\n        if (player !== type && type !== 'X') return\n        if (board[row][col].isSelected) {\n            onMoveChecker(selectedCell, board[row][col], player);\n            setSelectedCell(null)\n            const clearBoard = clearSelectedCells(board)\n            setBoard(clearBoard)\n            togglePlayer()\n            return\n        }\n        const clearBoard = clearSelectedCells(board)\n        setBoard(clearBoard)\n        setSelectedCell(board[row][col])\n        board[row][col].isSelected = true\n        const selectedCellBoard = boardService.getPossibleCells(row, col, board, type)\n        setBoard(selectedCellBoard)\n    }\n\n    const onMoveChecker = (fromCell, toCell, type) => {\n        const updatedBoard = boardService.moveChecker(board, fromCell, toCell, type)\n        setBoard(updatedBoard)\n        setGameBoards([...gameBoards, updatedBoard])\n        const lostPlayer = boardService.isGameOver();\n        (lostPlayer) ? setLoser(lostPlayer) : setLoser('')\n    }\n\n    const clearSelectedCells = (clearBoard) => {\n        clearBoard.forEach(row => {\n            row.forEach(cell => {\n                cell.isSelected = false\n            })\n        })\n        return clearBoard\n    }\n\n    return (\n        <section className=\"app-page flex column justify-center align-center\">\n            {!loser && <h1> {player === 'W' ? 'White' : 'Black'} Player Turn</h1>}\n            {loser && <h1>{loser}</h1>}\n            <table>\n                <tbody>\n                    {\n                        board.map((row, i) => {\n                            return <tr key={i}>\n                                {\n                                    row.map((column, j) =>\n                                        <BoardCell\n                                            key={i + j}\n                                            cellObj={board[i][j]}\n                                            onClickCell={onClickCell}\n                                            row={i}\n                                            col={j}\n                                        />)\n                                }\n                            </tr>\n                        })\n                    }\n\n                </tbody >\n            </table >\n            <div className=\"btns flex\">\n                <button className=\"btn clean-btn\" onClick={onRestart}>Restart</button>\n                <button className=\"btn clean-btn\" onClick={onUndo}>Undo</button>\n                <button className=\"btn clean-btn\" onClick={onRedo}>Redo</button>\n            </div>\n        </section >\n    )\n}\n\n","import { BoardPage } from './pages/BoardPage'\r\n\r\nconst routes = [\r\n    {\r\n        path: '/',\r\n        component: BoardPage,\r\n        isExact: true\r\n    },\r\n    {\r\n        path: '/checkers',\r\n        component: BoardPage,\r\n        isExact: true\r\n    },\r\n]\r\n\r\nexport default routes;","import { NavLink } from \"react-router-dom\";\nexport const BoardHeader = () => {\n    return (\n        <header className=\"app-header flex align-center justify-center\">\n            <NavLink to=\"/\">\n                <h1>Checkers Game</h1>\n            </NavLink>\n        </header>\n    )\n}\n","import React from 'react'\r\nimport { Route } from 'react-router'\r\nimport routes from './routes'\r\nimport { BoardHeader } from './cmps/BoardHeader'\r\n\r\nexport class RootCmp extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BoardHeader />\r\n                <main>\r\n                    {routes.map(route => <Route key={route.path} exact={route.isExact} component={route.component} path={route.path} />)}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { RootCmp } from './root-cmp';\nimport './assets/styles/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <RootCmp />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}